// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VA.Infrastructure.Data;

namespace VA.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210906012507_primeiro-migration")]
    partial class primeiromigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("VA.Domain.Candidato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("AlteradoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("alterado_em");

                    b.Property<DateTime?>("CadastradoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("cadastrado_em");

                    b.Property<int>("PerfilId")
                        .HasColumnType("int")
                        .HasColumnName("perfil_id");

                    b.Property<int?>("UsuarioAlteracao")
                        .HasColumnType("int")
                        .HasColumnName("usuario_alteracao");

                    b.Property<int?>("UsuarioCriacao")
                        .HasColumnType("int")
                        .HasColumnName("usuario_criacao");

                    b.Property<int>("VagaId")
                        .HasColumnType("int")
                        .HasColumnName("vaga_id");

                    b.HasKey("Id")
                        .HasName("pk_candidato");

                    b.HasIndex("PerfilId")
                        .HasDatabaseName("ix_candidato_perfil_id");

                    b.HasIndex("VagaId")
                        .HasDatabaseName("ix_candidato_vaga_id");

                    b.ToTable("candidato");
                });

            modelBuilder.Entity("VA.Domain.Cidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("AlteradoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("alterado_em");

                    b.Property<DateTime?>("CadastradoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("cadastrado_em");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("estado_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome");

                    b.Property<int?>("UsuarioAlteracao")
                        .HasColumnType("int")
                        .HasColumnName("usuario_alteracao");

                    b.Property<int?>("UsuarioCriacao")
                        .HasColumnType("int")
                        .HasColumnName("usuario_criacao");

                    b.HasKey("Id")
                        .HasName("pk_cidade");

                    b.HasIndex("EstadoId")
                        .HasDatabaseName("ix_cidade_estado_id");

                    b.ToTable("cidade");
                });

            modelBuilder.Entity("VA.Domain.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("AlteradoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("alterado_em");

                    b.Property<DateTime?>("CadastradoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("cadastrado_em");

                    b.Property<int>("CidadeId")
                        .HasColumnType("int")
                        .HasColumnName("cidade_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome");

                    b.Property<int?>("UsuarioAlteracao")
                        .HasColumnType("int")
                        .HasColumnName("usuario_alteracao");

                    b.Property<int?>("UsuarioCriacao")
                        .HasColumnType("int")
                        .HasColumnName("usuario_criacao");

                    b.HasKey("Id")
                        .HasName("pk_empresa");

                    b.HasIndex("CidadeId")
                        .HasDatabaseName("ix_empresa_cidade_id");

                    b.ToTable("empresa");
                });

            modelBuilder.Entity("VA.Domain.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("AlteradoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("alterado_em");

                    b.Property<DateTime?>("CadastradoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("cadastrado_em");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome");

                    b.Property<int?>("UsuarioAlteracao")
                        .HasColumnType("int")
                        .HasColumnName("usuario_alteracao");

                    b.Property<int?>("UsuarioCriacao")
                        .HasColumnType("int")
                        .HasColumnName("usuario_criacao");

                    b.HasKey("Id")
                        .HasName("pk_estado");

                    b.ToTable("estado");
                });

            modelBuilder.Entity("VA.Domain.Experiencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("AlteradoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("alterado_em");

                    b.Property<DateTime?>("CadastradoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("cadastrado_em");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_fim");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_inicio");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome");

                    b.Property<int>("PerfilId")
                        .HasColumnType("int")
                        .HasColumnName("perfil_id");

                    b.Property<int?>("UsuarioAlteracao")
                        .HasColumnType("int")
                        .HasColumnName("usuario_alteracao");

                    b.Property<int?>("UsuarioCriacao")
                        .HasColumnType("int")
                        .HasColumnName("usuario_criacao");

                    b.HasKey("Id")
                        .HasName("pk_experiencia");

                    b.HasIndex("PerfilId")
                        .HasDatabaseName("ix_experiencia_perfil_id");

                    b.ToTable("experiencia");
                });

            modelBuilder.Entity("VA.Domain.Habilidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("AlteradoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("alterado_em");

                    b.Property<DateTime?>("CadastradoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("cadastrado_em");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome");

                    b.Property<int>("PerfilId")
                        .HasColumnType("int")
                        .HasColumnName("perfil_id");

                    b.Property<int?>("UsuarioAlteracao")
                        .HasColumnType("int")
                        .HasColumnName("usuario_alteracao");

                    b.Property<int?>("UsuarioCriacao")
                        .HasColumnType("int")
                        .HasColumnName("usuario_criacao");

                    b.HasKey("Id")
                        .HasName("pk_habilidade");

                    b.HasIndex("PerfilId")
                        .HasDatabaseName("ix_habilidade_perfil_id");

                    b.ToTable("habilidade");
                });

            modelBuilder.Entity("VA.Domain.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("AlteradoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("alterado_em");

                    b.Property<DateTime?>("CadastradoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("cadastrado_em");

                    b.Property<int>("PerfilId")
                        .HasColumnType("int")
                        .HasColumnName("perfil_id");

                    b.Property<int?>("UsuarioAlteracao")
                        .HasColumnType("int")
                        .HasColumnName("usuario_alteracao");

                    b.Property<int?>("UsuarioCriacao")
                        .HasColumnType("int")
                        .HasColumnName("usuario_criacao");

                    b.Property<int>("VagaId")
                        .HasColumnType("int")
                        .HasColumnName("vaga_id");

                    b.HasKey("Id")
                        .HasName("pk_like");

                    b.HasIndex("PerfilId")
                        .HasDatabaseName("ix_like_perfil_id");

                    b.HasIndex("VagaId")
                        .HasDatabaseName("ix_like_vaga_id");

                    b.ToTable("like");
                });

            modelBuilder.Entity("VA.Domain.Pagina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("AlteradoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("alterado_em");

                    b.Property<DateTime?>("CadastradoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("cadastrado_em");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("empresa_id");

                    b.Property<int>("PerfilId")
                        .HasColumnType("int")
                        .HasColumnName("perfil_id");

                    b.Property<int?>("UsuarioAlteracao")
                        .HasColumnType("int")
                        .HasColumnName("usuario_alteracao");

                    b.Property<int?>("UsuarioCriacao")
                        .HasColumnType("int")
                        .HasColumnName("usuario_criacao");

                    b.HasKey("Id")
                        .HasName("pk_pagina");

                    b.HasIndex("EmpresaId")
                        .IsUnique()
                        .HasDatabaseName("ix_pagina_empresa_id");

                    b.HasIndex("PerfilId")
                        .HasDatabaseName("ix_pagina_perfil_id");

                    b.ToTable("pagina");
                });

            modelBuilder.Entity("VA.Domain.Perfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("AlteradoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("alterado_em");

                    b.Property<DateTime?>("CadastradoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("cadastrado_em");

                    b.Property<int>("CidadeId")
                        .HasColumnType("int")
                        .HasColumnName("cidade_id");

                    b.Property<string>("Curriculo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("curriculo");

                    b.Property<string>("DDD")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("ddd");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nome");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("telefone");

                    b.Property<int?>("UsuarioAlteracao")
                        .HasColumnType("int")
                        .HasColumnName("usuario_alteracao");

                    b.Property<int?>("UsuarioCriacao")
                        .HasColumnType("int")
                        .HasColumnName("usuario_criacao");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id")
                        .HasName("pk_perfil");

                    b.HasIndex("CidadeId")
                        .HasDatabaseName("ix_perfil_cidade_id");

                    b.HasIndex("UsuarioId")
                        .IsUnique()
                        .HasDatabaseName("ix_perfil_usuario_id");

                    b.ToTable("perfil");
                });

            modelBuilder.Entity("VA.Domain.Senioridade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("AlteradoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("alterado_em");

                    b.Property<DateTime?>("CadastradoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("cadastrado_em");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome");

                    b.Property<int?>("UsuarioAlteracao")
                        .HasColumnType("int")
                        .HasColumnName("usuario_alteracao");

                    b.Property<int?>("UsuarioCriacao")
                        .HasColumnType("int")
                        .HasColumnName("usuario_criacao");

                    b.HasKey("Id")
                        .HasName("pk_senioridade");

                    b.ToTable("senioridade");
                });

            modelBuilder.Entity("VA.Domain.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("AlteradoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("alterado_em");

                    b.Property<DateTime?>("CadastradoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("cadastrado_em");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("senha");

                    b.Property<int?>("UsuarioAlteracao")
                        .HasColumnType("int")
                        .HasColumnName("usuario_alteracao");

                    b.Property<int?>("UsuarioCriacao")
                        .HasColumnType("int")
                        .HasColumnName("usuario_criacao");

                    b.HasKey("Id")
                        .HasName("pk_usuario");

                    b.ToTable("usuario");
                });

            modelBuilder.Entity("VA.Domain.Vaga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("AlteradoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("alterado_em");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("ativo");

                    b.Property<DateTime?>("CadastradoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("cadastrado_em");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("descricao");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("empresa_id");

                    b.Property<int>("SenioridadeId")
                        .HasColumnType("int")
                        .HasColumnName("senioridade_id");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("titulo");

                    b.Property<int?>("UsuarioAlteracao")
                        .HasColumnType("int")
                        .HasColumnName("usuario_alteracao");

                    b.Property<int?>("UsuarioCriacao")
                        .HasColumnType("int")
                        .HasColumnName("usuario_criacao");

                    b.HasKey("Id")
                        .HasName("pk_vaga");

                    b.HasIndex("EmpresaId")
                        .HasDatabaseName("ix_vaga_empresa_id");

                    b.HasIndex("SenioridadeId")
                        .IsUnique()
                        .HasDatabaseName("ix_vaga_senioridade_id");

                    b.ToTable("vaga");
                });

            modelBuilder.Entity("VA.Domain.Candidato", b =>
                {
                    b.HasOne("VA.Domain.Perfil", "Perfil")
                        .WithMany("Candidaturas")
                        .HasForeignKey("PerfilId")
                        .HasConstraintName("fk_candidato_perfil_perfil_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VA.Domain.Vaga", "Vaga")
                        .WithMany("Candidato")
                        .HasForeignKey("VagaId")
                        .HasConstraintName("fk_candidato_vaga_vaga_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perfil");

                    b.Navigation("Vaga");
                });

            modelBuilder.Entity("VA.Domain.Cidade", b =>
                {
                    b.HasOne("VA.Domain.Estado", "Estado")
                        .WithMany("Cidades")
                        .HasForeignKey("EstadoId")
                        .HasConstraintName("fk_cidade_estado_estado_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("VA.Domain.Empresa", b =>
                {
                    b.HasOne("VA.Domain.Cidade", "Cidade")
                        .WithMany("Empresa")
                        .HasForeignKey("CidadeId")
                        .HasConstraintName("fk_empresa_cidade_cidade_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cidade");
                });

            modelBuilder.Entity("VA.Domain.Experiencia", b =>
                {
                    b.HasOne("VA.Domain.Perfil", "Perfil")
                        .WithMany("Experiencias")
                        .HasForeignKey("PerfilId")
                        .HasConstraintName("fk_experiencia_perfil_perfil_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("VA.Domain.Habilidade", b =>
                {
                    b.HasOne("VA.Domain.Perfil", "Perfil")
                        .WithMany("Habilidades")
                        .HasForeignKey("PerfilId")
                        .HasConstraintName("fk_habilidade_perfil_perfil_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("VA.Domain.Like", b =>
                {
                    b.HasOne("VA.Domain.Perfil", "Perfil")
                        .WithMany("Likes")
                        .HasForeignKey("PerfilId")
                        .HasConstraintName("fk_like_perfil_perfil_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VA.Domain.Vaga", "Vaga")
                        .WithMany("Likes")
                        .HasForeignKey("VagaId")
                        .HasConstraintName("fk_like_vaga_vaga_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perfil");

                    b.Navigation("Vaga");
                });

            modelBuilder.Entity("VA.Domain.Pagina", b =>
                {
                    b.HasOne("VA.Domain.Empresa", "Empresa")
                        .WithOne("Pagina")
                        .HasForeignKey("VA.Domain.Pagina", "EmpresaId")
                        .HasConstraintName("fk_pagina_empresa_empresa_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VA.Domain.Perfil", "Perfil")
                        .WithMany("Paginas")
                        .HasForeignKey("PerfilId")
                        .HasConstraintName("fk_pagina_perfil_perfil_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("VA.Domain.Perfil", b =>
                {
                    b.HasOne("VA.Domain.Cidade", "Cidade")
                        .WithMany()
                        .HasForeignKey("CidadeId")
                        .HasConstraintName("fk_perfil_cidade_cidade_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VA.Domain.Usuario", "Usuario")
                        .WithOne("Perfil")
                        .HasForeignKey("VA.Domain.Perfil", "UsuarioId")
                        .HasConstraintName("fk_perfil_usuario_usuario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cidade");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("VA.Domain.Vaga", b =>
                {
                    b.HasOne("VA.Domain.Empresa", "Empresa")
                        .WithMany("Vagas")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("fk_vaga_empresa_empresa_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VA.Domain.Senioridade", "Senioridade")
                        .WithOne("Vaga")
                        .HasForeignKey("VA.Domain.Vaga", "SenioridadeId")
                        .HasConstraintName("fk_vaga_senioridade_senioridade_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Senioridade");
                });

            modelBuilder.Entity("VA.Domain.Cidade", b =>
                {
                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("VA.Domain.Empresa", b =>
                {
                    b.Navigation("Pagina");

                    b.Navigation("Vagas");
                });

            modelBuilder.Entity("VA.Domain.Estado", b =>
                {
                    b.Navigation("Cidades");
                });

            modelBuilder.Entity("VA.Domain.Perfil", b =>
                {
                    b.Navigation("Candidaturas");

                    b.Navigation("Experiencias");

                    b.Navigation("Habilidades");

                    b.Navigation("Likes");

                    b.Navigation("Paginas");
                });

            modelBuilder.Entity("VA.Domain.Senioridade", b =>
                {
                    b.Navigation("Vaga");
                });

            modelBuilder.Entity("VA.Domain.Usuario", b =>
                {
                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("VA.Domain.Vaga", b =>
                {
                    b.Navigation("Candidato");

                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
